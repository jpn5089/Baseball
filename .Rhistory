install.packages("XML")
install.packages("dplyr")
library(XML)
library(dplyr)
test <- read.csv("C://Users/johnp/Documents/GitHub/Baseball/WAR_Input.csv")
war <- list()
for (i in 1:360){
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
for (i in 135:360){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
war_final <- do.call(rbind,war) %>%
mutate(war_path   = as.numeric(as.character(war_path))) %>%
mutate(PA_IP_path   = as.numeric(as.character(PA_IP_path))) %>%
mutate(test.i..2. = as.character(test.i..2.)) %>%
mutate(test.i..4. = as.character(test.i..4.))
View(war_final)
for (i in 134:360){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
test <- read.csv("C://Users/johnp/Documents/GitHub/Baseball/WAR_Input.csv")
for (i in 177:360){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
war_final <- do.call(rbind,war) %>%
mutate(war_path   = as.numeric(as.character(war_path))) %>%
mutate(PA_IP_path   = as.numeric(as.character(PA_IP_path))) %>%
mutate(test.i..2. = as.character(test.i..2.)) %>%
mutate(test.i..4. = as.character(test.i..4.))
for (i in 190:360){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
View(war_final)
print(i)
for (i in 190:360){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
war_final <- do.call(rbind,war) %>%
mutate(war_path   = as.numeric(as.character(war_path))) %>%
mutate(PA_IP_path   = as.numeric(as.character(PA_IP_path))) %>%
mutate(test.i..2. = as.character(test.i..2.)) %>%
mutate(test.i..4. = as.character(test.i..4.))
test <- read.csv("C://Users/johnp/Documents/GitHub/Baseball/WAR_Input.csv")
war <- list()
for (i in 1:360){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
for (i in 174:360){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
war_final <- do.call(rbind,war) %>%
mutate(war_path   = as.numeric(as.character(war_path))) %>%
mutate(PA_IP_path   = as.numeric(as.character(PA_IP_path))) %>%
mutate(test.i..2. = as.character(test.i..2.)) %>%
mutate(test.i..4. = as.character(test.i..4.))
colnames(war_final) <- c("Player", "Position", "Team", "WAR", "PA_IP", "Status")
View(war_final)
test <- read.csv("C://Users/johnp/Documents/GitHub/Baseball/WAR_Input.csv")
for (i in 213:213){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
for (i in 213:214){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
View(test)
test <- read.csv("C://Users/johnp/Documents/GitHub/Baseball/WAR_Input.csv")
war <- list()
for (i in 1:360){
print(i)
print(test[i,2])
data_war <- htmlParse(as.character(test[i,7])) #URL for parsing WAR
#Using that URL as well as xpath to grab 2017 WAR value
war_path <- xpathSApply(data_war, as.character(test[i,8]), xmlValue)
data_PA_IP <- htmlParse(as.character(test[i,7])) #URL for parsing PA or IP
#Using that URL as well as xpath to grab 2017 PA or IP value
PA_IP_path <- xpathSApply(data_PA_IP, as.character(test[i,9]), xmlValue)
#Choose values you want to keep from CSV
war[[i]] <- data.frame(test[i,2], test[i,4], test[i,5], war_path, PA_IP_path, test[i,10])
}
war_final <- do.call(rbind,war) %>%
mutate(war_path   = as.numeric(as.character(war_path))) %>%
mutate(PA_IP_path   = as.numeric(as.character(PA_IP_path))) %>%
mutate(test.i..2. = as.character(test.i..2.)) %>%
mutate(test.i..4. = as.character(test.i..4.))
colnames(war_final) <- c("Player", "Position", "Team", "WAR", "PA_IP", "Status")
void <- war_final$Player %in% c('Anthony DeSclafani', 'Lucas Giolito',
'Tyler Thornburg', 'Alex Reyes', 'Drew Smyly',
'Jung Ho Kang', 'Scott Kazmir', 'Carter Capps',
'Mauricio Cabrera', 'David Dahl')
war_final$WAR[void] <- 0
war_final$PA_IP[void] <- 0
for (i in 1:360) {
if (war_final$Status[i] == "Bench") {
war_final$WAR[i] = war_final$WAR[i]*0.5
} else {
war_final$WAR[i] = war_final$WAR[i]
}
}
for (i in 1:360) {
if (war_final$Status[i] == "Bench") {
war_final$PA_IP[i] = war_final$PA_IP[i]*0.5
} else {
war_final$PA_IP[i] = war_final$PA_IP[i]
}
}
total_war <- group_by(war_final, Team) %>%
summarize(total_war_sum = sum(WAR))
pitchers <- filter(war_final, Position == "P")
standings_PWar <- group_by(pitchers, Team) %>%
summarize(pitcher_war_sum = sum(WAR))
standings_P_IP <- group_by(pitchers, Team) %>%
summarize(IP_sum  = sum(PA_IP))
pitch <- merge(standings_PWar, standings_P_IP, by = "Team") %>%
mutate(WARPerIP = pitcher_war_sum/IP_sum)
batters <- filter(war_final, Position != "P")
standings_BatWar <- group_by(batters, Team) %>%
summarize(batter_war_sum = sum(WAR))
standings_Bat_IP <- group_by(batters, Team) %>%
summarize(PA_sum  = sum(PA_IP))
bat <- merge(standings_BatWar, standings_Bat_IP, by = "Team") %>%
mutate(WARPerPA = batter_war_sum/PA_sum)
first <- merge(total_war, pitch, by = "Team")
standings <- merge(first, bat, by = "Team")
colnames(standings)[2] <- "Total WAR"
ordered_stand <- standings[order(-standings$`Total WAR`),]
write.csv(war_final, "C://Users/johnp/Documents/GitHub/Baseball/WAR_Output.csv")
write.csv(ordered_stand, "C://Users/johnp/Documents/GitHub/Baseball/WAR_Standings.csv")
View(ordered_stand)
